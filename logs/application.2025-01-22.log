2025-01-22 12:32:04 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 15680 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:32:04 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:32:04 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:32:44 [main] WARN  o.s.w.c.s.GenericWebApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataGatherController' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\controller\gather\DataGatherController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'gatherEndpointService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\GatherEndpointService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
2025-01-22 12:32:44 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataGatherController' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\controller\gather\DataGatherController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'gatherEndpointService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\GatherEndpointService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1463)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:128)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:128)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:100)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:520)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:748)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:443)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:211)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'gatherEndpointService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\GatherEndpointService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 96 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 110 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1806)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 124 common frames omitted
Caused by: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.neo4j.driver.internal.util.Futures.blockingGet(Futures.java:108)
	at org.neo4j.driver.internal.InternalSession.beginTransaction(InternalSession.java:195)
	at org.neo4j.driver.internal.InternalSession.lambda$transaction$5(InternalSession.java:176)
	at org.neo4j.driver.internal.retry.ExponentialBackoffRetryLogic.retry(ExponentialBackoffRetryLogic.java:113)
	at org.neo4j.driver.internal.InternalSession.transaction(InternalSession.java:175)
	at org.neo4j.driver.internal.InternalSession.execute(InternalSession.java:160)
	at org.neo4j.driver.internal.InternalSession.executeWrite(InternalSession.java:132)
	at org.neo4j.driver.Session.executeWrite(Session.java:169)
	at org.neo4j.driver.Session.executeWriteWithoutResult(Session.java:183)
	at org.springframework.ai.vectorstore.Neo4jVectorStore.afterPropertiesSet(Neo4jVectorStore.java:186)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)
	... 135 common frames omitted
	Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
		at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
		at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
		at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
Caused by: java.net.ConnectException: Connection refused: no further information
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-01-22 12:32:44 [main] WARN  o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [com.Orio.wither_project.ai.OllamaTest@2ed7296f]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@156531f1 testClass = com.Orio.wither_project.ai.OllamaTest, locations = [], classes = [com.Orio.wither_project.WitherProject], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@1e461e41, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@9ebe38b, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@38234a38, org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizer@34c01041, org.springframework.boot.test.web.reactor.netty.DisableReactorResourceFactoryGlobalResourcesContextCustomizerFactory$DisableReactorResourceFactoryGlobalResourcesContextCustomizerCustomizer@50d13246, org.springframework.boot.test.autoconfigure.OnFailureConditionReportContextCustomizerFactory$OnFailureConditionReportContextCustomizer@3d3e5463, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@65a15628, org.springframework.boot.test.context.SpringBootTestAnnotation@44a81613], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:128)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:128)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:100)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:520)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:748)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:443)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:211)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataGatherController' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\controller\gather\DataGatherController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'gatherEndpointService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\GatherEndpointService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1463)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	... 72 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'gatherEndpointService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\GatherEndpointService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 96 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'springVectorDbService' defined in file [C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes\com\Orio\wither_project\gather\storage\vector\service\impl\SpringVectorDbService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 110 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'vectorStore' defined in class path resource [org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.class]: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1806)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 124 common frames omitted
Caused by: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
	at org.neo4j.driver.internal.util.Futures.blockingGet(Futures.java:108)
	at org.neo4j.driver.internal.InternalSession.beginTransaction(InternalSession.java:195)
	at org.neo4j.driver.internal.InternalSession.lambda$transaction$5(InternalSession.java:176)
	at org.neo4j.driver.internal.retry.ExponentialBackoffRetryLogic.retry(ExponentialBackoffRetryLogic.java:113)
	at org.neo4j.driver.internal.InternalSession.transaction(InternalSession.java:175)
	at org.neo4j.driver.internal.InternalSession.execute(InternalSession.java:160)
	at org.neo4j.driver.internal.InternalSession.executeWrite(InternalSession.java:132)
	at org.neo4j.driver.Session.executeWrite(Session.java:169)
	at org.neo4j.driver.Session.executeWriteWithoutResult(Session.java:183)
	at org.springframework.ai.vectorstore.Neo4jVectorStore.afterPropertiesSet(Neo4jVectorStore.java:186)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)
	... 135 common frames omitted
	Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
		at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
		at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
		at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.neo4j.driver.exceptions.ServiceUnavailableException: Unable to connect to localhost:7687, ensure the database is running and that there is a working network connection to it.
		... 147 common frames omitted
		Suppressed: org.neo4j.driver.internal.util.ErrorUtil$InternalExceptionCause: null
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.databaseUnavailableError(ChannelConnectedListener.java:80)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:74)
			at org.neo4j.driver.internal.async.connection.ChannelConnectedListener.operationComplete(ChannelConnectedListener.java:33)
			at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
			at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
			at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
			at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
			at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
			at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:326)
			at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:342)
			at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
			at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
			at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
			at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
			at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
			at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
			at java.base/java.lang.Thread.run(Thread.java:833)
	Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
	Caused by: java.net.ConnectException: Connection refused: no further information
		at java.base/sun.nio.ch.Net.pollConnect(Native Method)
		at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
		at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
		at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information: localhost/127.0.0.1:7687
Caused by: java.net.ConnectException: Connection refused: no further information
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-01-22 12:33:51 [restartedMain] INFO  c.Orio.wither_project.WitherProject - Starting WitherProject using Java 17.0.4 with PID 21536 (C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:33:51 [restartedMain] DEBUG c.Orio.wither_project.WitherProject - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:33:51 [restartedMain] INFO  c.Orio.wither_project.WitherProject - The following 1 profile is active: "development"
2025-01-22 12:33:58 [restartedMain] INFO  c.Orio.wither_project.WitherProject - Started WitherProject in 7.464 seconds (process running for 8.064)
2025-01-22 12:34:14 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 11284 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:34:14 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:34:14 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:34:20 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.043 seconds (process running for 8.532)
2025-01-22 12:34:35 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Java?, Response: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, and enterprise software, due to its simplicity, flexibility, and robustness., Response length: 522
2025-01-22 12:34:41 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain polymorphism, Response: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:34:47 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What are design patterns?, Response: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:34:56 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe SOLID principles, Response: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 12:35:04 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Spring Boot?, Response: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:35:12 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain dependency injection, Response: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:35:19 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is JPA?, Response: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 494
2025-01-22 12:35:26 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe microservices, Response: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., Response length: 556
2025-01-22 12:35:33 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is REST API?, Response: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., Response length: 479
2025-01-22 12:35:42 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain Docker containers, Response: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:35:42 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Sequential execution time: 81003 ms
2025-01-22 12:35:51 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 10484 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:35:51 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:35:51 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:35:59 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 8.469 seconds (process running for 9.948)
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time: 75341 ms
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Java?, Response content: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, and enterprise software, due to its simplicity, flexibility, and robustness., Response length: 522
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain polymorphism, Response content: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What are design patterns?, Response content: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe SOLID principles, Response content: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Spring Boot?, Response content: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain dependency injection, Response content: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is JPA?, Response content: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 494
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe microservices, Response content: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., Response length: 556
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is REST API?, Response content: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., Response length: 479
2025-01-22 12:37:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain Docker containers, Response content: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:45:36 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 13360 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:45:36 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:45:36 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:45:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.074 seconds (process running for 8.367)
2025-01-22 12:45:44 [pool-5-thread-6] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 12:45:44 [pool-5-thread-10] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 12:45:44 [pool-5-thread-5] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 12:45:44 [pool-5-thread-1] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 12:45:44 [pool-5-thread-9] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 12:45:44 [pool-5-thread-2] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 12:45:44 [pool-5-thread-4] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 12:45:44 [pool-5-thread-7] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 12:45:44 [pool-5-thread-3] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 12:45:44 [pool-5-thread-8] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 12:45:59 [pool-5-thread-4] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe SOLID principles, Response: The SOLID principles are a set of five fundamental design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 562
2025-01-22 12:46:06 [pool-5-thread-8] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe microservices, Response: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to respond quickly to changing market conditions and customer needs by allowing individual services to evolve and improve without affecting the entire system., Response length: 561
2025-01-22 12:46:14 [pool-5-thread-5] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Spring Boot?, Response: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:46:21 [pool-5-thread-2] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain polymorphism, Response: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:46:29 [pool-5-thread-7] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is JPA?, Response: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 494
2025-01-22 12:46:37 [pool-5-thread-6] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain dependency injection, Response: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:46:46 [pool-5-thread-10] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain Docker containers, Response: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:46:56 [pool-5-thread-1] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Java?, Response: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 12:47:03 [pool-5-thread-3] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What are design patterns?, Response: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:47:10 [pool-5-thread-9] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is REST API?, Response: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., Response length: 479
2025-01-22 12:47:10 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time: 86761 ms
2025-01-22 12:47:26 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 22544 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:47:26 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:47:26 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:47:34 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 8.02 seconds (process running for 9.403)
2025-01-22 12:47:34 [ForkJoinPool-1-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 12:47:34 [ForkJoinPool-1-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 12:47:34 [ForkJoinPool-1-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 12:47:34 [ForkJoinPool-1-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 12:47:34 [ForkJoinPool-1-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 12:47:34 [ForkJoinPool-1-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 12:47:34 [ForkJoinPool-1-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 12:47:34 [ForkJoinPool-1-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 12:47:34 [ForkJoinPool-1-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 12:47:34 [ForkJoinPool-1-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time with ForkJoinPool: 77643 ms
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Java?, Response content: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain polymorphism, Response content: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What are design patterns?, Response content: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe SOLID principles, Response content: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Spring Boot?, Response content: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain dependency injection, Response content: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is JPA?, Response content: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 494
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe microservices, Response content: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., Response length: 556
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is REST API?, Response content: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., Response length: 479
2025-01-22 12:48:52 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain Docker containers, Response content: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:49:12 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 6428 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:49:12 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:49:12 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:49:18 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 6.881 seconds (process running for 8.167)
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 12:49:19 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 12:49:19 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time with parallelStream: 70338 ms
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Java?, Response content: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain polymorphism, Response content: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What are design patterns?, Response content: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe SOLID principles, Response content: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Spring Boot?, Response content: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain dependency injection, Response content: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is JPA?, Response content: JPA, or Java Persistence API, is a standard Java specification for accessing, persisting, and managing data in a database. It provides a common interface for interacting with databases, allowing developers to write portable and database-agnostic code. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 435
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe microservices, Response content: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., Response length: 556
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is REST API?, Response content: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It relies on a stateless, client-server architecture where clients make requests to servers using a fixed set of operations (GET, POST, PUT, DELETE, etc.) to manipulate and retrieve resources. This approach allows for flexibility, scalability, and simplicity in building web-based systems that can be easily integrated with other applications., Response length: 482
2025-01-22 12:50:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain Docker containers, Response content: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:50:47 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 15732 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:50:47 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:50:47 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:50:53 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 27728 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 12:50:53 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 12:50:53 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 12:50:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.753 seconds (process running for 9.006)
2025-01-22 12:50:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 12:51:04 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 11.069 seconds (process running for 12.629)
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is Java?
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 12:51:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 12:51:06 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Java?, Response: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 12:51:06 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time: 75835 ms
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Java?, Response content: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain polymorphism, Response content: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What are design patterns?, Response content: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe SOLID principles, Response content: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Spring Boot?, Response content: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain dependency injection, Response content: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is JPA?, Response content: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 494
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe microservices, Response content: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., Response length: 556
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is REST API?, Response content: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It relies on a stateless, client-server architecture where clients make requests to servers using a fixed set of operations (GET, POST, PUT, DELETE, etc.) to manipulate and retrieve resources. This approach allows for flexibility, scalability, and simplicity in building web-based systems that can be easily integrated with other applications., Response length: 482
2025-01-22 12:52:21 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain Docker containers, Response content: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:52:27 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain polymorphism, Response: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 12:52:27 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 12:52:33 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What are design patterns?, Response: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., Response length: 483
2025-01-22 12:52:33 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 12:52:41 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe SOLID principles, Response: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 12:52:41 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 12:52:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Spring Boot?, Response: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., Response length: 535
2025-01-22 12:52:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 12:52:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain dependency injection, Response: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 12:52:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 12:53:02 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is JPA?, Response: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 494
2025-01-22 12:53:02 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 12:53:08 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe microservices, Response: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., Response length: 556
2025-01-22 12:53:08 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 12:53:16 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is REST API?, Response: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., Response length: 479
2025-01-22 12:53:16 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 12:53:24 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain Docker containers, Response: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., Response length: 630
2025-01-22 12:53:24 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Sequential execution time: 148423 ms
2025-01-22 13:06:32 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 24884 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:06:32 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:06:32 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:06:39 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.203 seconds (process running for 8.489)
2025-01-22 13:07:07 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 4256 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:07:07 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:07:07 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:07:14 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.182 seconds (process running for 8.533)
2025-01-22 13:07:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:07:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, and enterprise software, due to its simplicity, flexibility, and robustness., length: 522
2025-01-22 13:07:29 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:07:34 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., length: 429
2025-01-22 13:07:34 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:07:40 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., length: 483
2025-01-22 13:07:40 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:07:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., length: 550
2025-01-22 13:07:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:07:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., length: 535
2025-01-22 13:07:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:08:02 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., length: 519
2025-01-22 13:08:02 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:08:09 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., length: 494
2025-01-22 13:08:09 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:08:16 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., length: 556
2025-01-22 13:08:16 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:08:22 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., length: 479
2025-01-22 13:08:22 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:08:30 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., length: 630
2025-01-22 13:08:30 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Sequential API execution time: 75357 ms
2025-01-22 13:09:38 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 26444 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:09:38 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:09:38 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:09:45 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.559 seconds (process running for 8.873)
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:09:46 [ForkJoinPool.commonPool-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:09:53 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., length: 519
2025-01-22 13:09:59 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., length: 556
2025-01-22 13:10:05 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., length: 483
2025-01-22 13:10:12 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., length: 479
2025-01-22 13:10:20 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., length: 550
2025-01-22 13:10:27 [ForkJoinPool.commonPool-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., length: 630
2025-01-22 13:10:34 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a "batteries included" approach, offering a wide range of features such as auto-configuration, embedded servers, and dependency management out-of-the-box. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for building web applications, microservices, and more., length: 535
2025-01-22 13:10:40 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., length: 429
2025-01-22 13:10:47 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects/classes and a relational database. It provides a standard way to interact with databases using Java, allowing developers to focus on business logic rather than low-level database operations. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., length: 494
2025-01-22 13:10:55 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, and enterprise software, due to its simplicity, flexibility, and robustness., length: 522
2025-01-22 13:10:55 [main] INFO  c.Orio.wither_project.ai.OllamaTest - CompletableFuture API execution time: 69059 ms
2025-01-22 13:11:28 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 7092 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:11:28 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:11:28 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:11:35 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.273 seconds (process running for 8.664)
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:11:36 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:11:36 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:11:42 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., length: 429
2025-01-22 13:11:49 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to evolve their applications incrementally, without having to rewrite or replace the entire system, making it easier to adapt to changing business needs., length: 556
2025-01-22 13:12:00 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., length: 563
2025-01-22 13:12:10 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: JPA, or Java Persistence API, is a standard Java specification for accessing, persisting, and managing data in a database. It provides a common interface for interacting with databases, allowing developers to write portable and database-agnostic code. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., length: 435
2025-01-22 13:12:19 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Spring Boot is a Java-based framework that allows developers to create standalone, production-grade Spring applications with minimal configuration and effort. It provides a set of tools and features that simplify the process of building web applications, including auto-configuration, embedded servers, and dependency management. By using Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for rapid application development and deployment., length: 528
2025-01-22 13:12:30 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., length: 550
2025-01-22 13:12:40 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process space, ensuring that changes made to one container do not affect others. This isolation enables developers to quickly spin up and down containers for testing, deployment, and scaling, making it easier to manage complex applications and reduce the risk of conflicts between different components., length: 630
2025-01-22 13:12:49 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for communication between systems by transferring data over HTTP protocols using a set of predefined methods such as GET, POST, PUT, and DELETE to manipulate resources on the server. This approach enables developers to create flexible, scalable, and maintainable APIs that can be easily integrated with other systems and services., length: 479
2025-01-22 13:12:56 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to write more maintainable, flexible, and scalable software. By applying established design patterns, developers can avoid reinventing the wheel and focus on higher-level concerns, such as business logic and user experience., length: 483
2025-01-22 13:13:04 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., length: 519
2025-01-22 13:13:04 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel API execution time: 87931 ms
2025-01-22 13:22:12 [restartedMain] INFO  c.Orio.wither_project.WitherProject - Starting WitherProject using Java 17.0.4 with PID 25068 (C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:22:12 [restartedMain] DEBUG c.Orio.wither_project.WitherProject - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:22:12 [restartedMain] INFO  c.Orio.wither_project.WitherProject - The following 1 profile is active: "development"
2025-01-22 13:22:19 [restartedMain] INFO  c.Orio.wither_project.WitherProject - Started WitherProject in 7.037 seconds (process running for 7.564)
2025-01-22 13:22:36 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 10180 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:22:36 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:22:36 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.3 seconds (process running for 8.613)
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:22:43 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Submitting question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time: 124707 ms
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Java?, Response content: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain polymorphism, Response content: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What are design patterns?, Response content: Design patterns are reusable solutions to common problems that arise during software development, providing a template for designing and implementing code. They describe how to solve a particular problem or achieve a specific goal in a way that is independent of any specific technology or programming language. By using established design patterns, developers can write more maintainable, flexible, and scalable code that is easier to understand and modify over time., Response length: 468
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe SOLID principles, Response content: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Spring Boot?, Response content: Spring Boot is a popular Java-based framework that simplifies the process of building and deploying web applications. It provides a set of pre-configured features, such as embedded servers, auto-configuration, and dependency management, to help developers get started quickly with minimal setup. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for rapid application development and deployment., Response length: 499
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain dependency injection, Response content: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is JPA?, Response content: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between an application and a database. It provides a standard way to interact with databases using Java, allowing developers to write portable and database-independent code. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 456
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe microservices, Response content: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to adopt a more agile and iterative development process, as changes to one service do not impact the entire application., Response length: 523
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is REST API?, Response content: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for a client-server interaction where the client sends requests to access or modify resources on the server, and the server responds with the requested data in a standardized format such as JSON or XML. This approach enables loose coupling between systems, scalability, and flexibility, making it a popular choice for building modern web applications and services., Response length: 513
2025-01-22 13:24:48 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain Docker containers, Response content: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process tree, ensuring that changes made in one container do not affect others. Docker containers can be easily created, started, stopped, and deleted, making them a popular choice for development, testing, and deployment of applications., Response length: 566
2025-01-22 13:25:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 16280 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:25:05 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:25:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:25:12 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.516 seconds (process running for 8.876)
2025-01-22 13:25:13 [pool-5-thread-6] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:25:13 [pool-5-thread-5] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:25:13 [pool-5-thread-4] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:25:13 [pool-5-thread-2] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:25:13 [pool-5-thread-8] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:25:13 [pool-5-thread-7] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:25:13 [pool-5-thread-3] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:25:13 [pool-5-thread-9] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:25:13 [pool-5-thread-1] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:25:13 [pool-5-thread-10] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:25:36 [pool-5-thread-8] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe microservices, Response: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to respond quickly to changing market conditions and customer needs by allowing individual services to evolve and improve without affecting the entire system., Response length: 561
2025-01-22 13:25:39 [pool-5-thread-10] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain Docker containers, Response: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process tree, ensuring that changes made in one container do not affect others. This isolation enables developers to test, deploy, and manage applications more efficiently, as well as simplify the process of scaling and managing multiple instances of an application., Response length: 594
2025-01-22 13:25:57 [pool-5-thread-2] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain polymorphism, Response: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 13:26:02 [pool-5-thread-9] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is REST API?, Response: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for a client-server interaction where the client sends requests to access or modify resources on the server, and the server responds with the requested data in a standardized format such as JSON or XML. This approach enables loose coupling between systems, scalability, and flexibility, making it a popular choice for building modern web applications and services., Response length: 513
2025-01-22 13:26:23 [pool-5-thread-5] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Spring Boot?, Response: Spring Boot is a popular Java-based framework that simplifies the process of building and deploying web applications. It provides a set of pre-configured features, such as embedded servers, auto-configuration, and dependency management, to help developers get started quickly with minimal setup. By leveraging Spring Boot, developers can focus on writing business logic without worrying about the underlying infrastructure, making it an ideal choice for rapid application development and deployment., Response length: 499
2025-01-22 13:26:25 [pool-5-thread-1] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is Java?, Response: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, games, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 548
2025-01-22 13:26:45 [pool-5-thread-7] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What is JPA?, Response: JPA, or Java Persistence API, is a standard Java specification for accessing, persisting, and managing data in a database. It provides a common interface for interacting with databases, allowing developers to write portable code that can be used across different database management systems. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate, to map Java objects to database tables and vice versa., Response length: 448
2025-01-22 13:26:47 [pool-5-thread-6] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Explain dependency injection, Response: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object receives its dependencies from an external source, rather than creating them itself, which helps to reduce coupling between objects and improve flexibility. By injecting dependencies, developers can decouple the creation of objects from their usage, allowing for more modular and scalable code., Response length: 468
2025-01-22 13:27:04 [pool-5-thread-3] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: What are design patterns?, Response: Design patterns are reusable solutions to common problems that arise during software development, providing a proven and tested approach to designing and implementing code. They capture expertise and experience in solving specific design challenges, allowing developers to focus on the problem at hand rather than reinventing the wheel. By using established design patterns, developers can create more maintainable, scalable, and efficient software systems., Response length: 457
2025-01-22 13:27:08 [pool-5-thread-4] INFO  c.Orio.wither_project.ai.OllamaTest - Prompt: Answer the following question in 3 sentences: Describe SOLID principles, Response: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 550
2025-01-22 13:27:08 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time: 115506 ms
2025-01-22 13:28:09 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 19412 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:28:09 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:28:09 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:28:15 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 6.939 seconds (process running for 8.284)
2025-01-22 13:28:16 [ForkJoinPool-1-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:28:16 [ForkJoinPool-1-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:28:16 [ForkJoinPool-1-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:28:16 [ForkJoinPool-1-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:28:16 [ForkJoinPool-1-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:28:16 [ForkJoinPool-1-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:28:16 [ForkJoinPool-1-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:28:16 [ForkJoinPool-1-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:28:16 [ForkJoinPool-1-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:28:16 [ForkJoinPool-1-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:30:24 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 24856 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:30:24 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:30:24 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:30:31 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.163 seconds (process running for 8.488)
2025-01-22 13:30:31 [ForkJoinPool-1-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:30:31 [ForkJoinPool-1-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:30:31 [ForkJoinPool-1-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:30:31 [ForkJoinPool-1-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:30:31 [ForkJoinPool-1-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:30:31 [ForkJoinPool-1-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:30:31 [ForkJoinPool-1-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:30:31 [ForkJoinPool-1-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:30:31 [ForkJoinPool-1-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:30:31 [ForkJoinPool-1-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Executing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Parallel execution time with ForkJoinPool: 213608 ms
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Java?, Response content: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., Response length: 563
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain polymorphism, Response content: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., Response length: 429
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What are design patterns?, Response content: Design patterns are reusable solutions to common problems that arise during software development, providing a template for designing and implementing code. They describe how to solve a particular problem or achieve a specific goal in a way that is independent of the programming language being used. By using established design patterns, developers can write more maintainable, flexible, and scalable code, reducing the need for reinventing the wheel with each new project., Response length: 473
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe SOLID principles, Response content: The SOLID principles are a set of five fundamental design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single responsibility principle (SRP), Open/closed principle (OCP), Liskov substitution principle (LSP), Interface segregation principle (ISP), and Dependency inversion principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., Response length: 562
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is Spring Boot?, Response content: Spring Boot is a popular Java-based framework that simplifies the process of building and deploying web applications. It provides a set of tools and features that allow developers to create standalone, production-grade applications with minimal configuration and code, making it ideal for rapid prototyping and development. By leveraging Spring Boot's auto-configuration, embedded servers, and other features, developers can focus on writing business logic rather than worrying about the underlying infrastructure., Response length: 514
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain dependency injection, Response content: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object's dependencies are provided by an external source, rather than being created or instantiated within the object itself, promoting separation of concerns and reducing coupling between objects. By injecting dependencies, developers can decouple the creation of objects from their usage, enabling more flexibility and scalability in software design., Response length: 519
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is JPA?, Response content: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between an application and a database. It provides a standard way to interact with databases using Java, allowing developers to write portable and database-independent code. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., Response length: 456
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Describe microservices, Response content: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to respond quickly to changing market conditions and customer needs by allowing individual services to evolve and improve without affecting the entire system., Response length: 561
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: What is REST API?, Response content: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for a client-server interaction where the client sends requests to access or modify resources on the server, and the server responds with the requested data in a standardized format, such as JSON or XML. This approach enables loose coupling between systems, scalability, and flexibility, making it a popular choice for building modern web applications and APIs., Response length: 510
2025-01-22 13:34:05 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Question: Explain Docker containers, Response content: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container is isolated from others running on the same host, with its own file system, network stack, and process tree, ensuring that changes made in one container do not affect others. Docker containers can be easily created, started, stopped, and deleted, making them ideal for development, testing, and deployment of applications in a flexible and efficient manner., Response length: 590
2025-01-22 13:34:28 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 14652 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:34:28 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:34:28 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:34:34 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.016 seconds (process running for 8.329)
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:34:35 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:34:35 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Processing question: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:38:02 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 25596 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:38:02 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:38:02 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:38:09 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 7.433 seconds (process running for 8.744)
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:38:10 [ForkJoinPool.commonPool-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:39:44 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Microservices are a software development approach where a large application is broken down into smaller, independent services that communicate with each other through APIs. Each microservice is responsible for a specific business capability and can be developed, tested, and deployed independently of the others, allowing for greater flexibility and scalability. This architecture enables organizations to respond quickly to changing market conditions and customer needs by allowing individual services to evolve and improve without affecting the entire system., length: 561
2025-01-22 13:39:44 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Spring Boot is a popular Java-based framework that simplifies the process of building and deploying web applications. It provides a set of tools and features that allow developers to create stand-alone, production-grade applications with minimal configuration and code, making it ideal for rapid prototyping and development. By leveraging Spring Boot's auto-configuration, embedded servers, and other features, developers can focus on writing business logic rather than worrying about the underlying infrastructure., length: 515
2025-01-22 13:39:45 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: A REST (Representational State of Resource) API is an architectural style for designing networked applications, particularly web services. It allows for a client-server interaction where the client sends requests to access or modify resources on the server, and the server responds with the requested data in a standardized format, such as JSON or XML. This approach enables developers to build scalable, flexible, and maintainable systems that can be easily integrated with other applications and services., length: 507
2025-01-22 13:39:56 [ForkJoinPool.commonPool-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Docker containers are lightweight and portable environments that package an application and its dependencies into a single container, allowing it to run consistently across different environments without modification. Each container runs as a separate process on the host operating system, sharing the same kernel but having its own isolated file system, network stack, and processes. This isolation allows multiple containers to run simultaneously on the same machine, making it easier to develop, test, and deploy applications in a more efficient and scalable way., length: 566
2025-01-22 13:39:57 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Dependency Injection (DI) is a software design pattern that allows components to be loosely coupled, making it easier to test, maintain, and extend systems. In DI, an object receives its dependencies from an external source, rather than creating them itself, which helps to reduce coupling between objects and promotes flexibility and scalability. By injecting dependencies, developers can decouple the creation of objects from their usage, allowing for more modular and flexible code that is easier to manage and evolve over time., length: 531
2025-01-22 13:41:13 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Design patterns are reusable solutions to common problems that arise during software development, providing a proven approach to designing and implementing code. They capture expertise and experience in a particular domain or problem area, allowing developers to apply established best practices and avoid reinventing the wheel. By using design patterns, developers can write more maintainable, flexible, and scalable code that is easier to understand and modify over time., length: 473
2025-01-22 13:41:15 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different classes to be treated as if they were of the same class. This means that an object can take on multiple forms, depending on its context or the method being called, without changing its underlying structure. Polymorphism enables more generic and flexible code, making it easier to write reusable and maintainable software., length: 429
2025-01-22 13:41:25 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between an application and a database. It provides a standard way to interact with databases using Java, allowing developers to write portable and database-independent code. JPA is typically used in conjunction with an Object-Relational Mapping (ORM) tool, such as Hibernate or EclipseLink, which translates Java objects into database tables and vice versa., length: 456
2025-01-22 13:41:31 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: Java is a high-level, object-oriented programming language developed by James Gosling and his team at Sun Microsystems (now owned by Oracle Corporation) in the mid-1990s. It's designed to be platform-independent, meaning that programs written in Java can run on any device that has a Java Virtual Machine (JVM) installed, without the need for recompilation. Java is widely used for developing applications such as Android apps, web applications, desktop applications, and enterprise software, due to its simplicity, flexibility, and large community of developers., length: 563
2025-01-22 13:41:32 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Response received: The SOLID principles are a set of five design principles for object-oriented programming (OOP) that aim to promote clean, maintainable, and scalable code. The acronym SOLID stands for Single Responsibility Principle (SRP), Open-Closed Principle (OCP), Liskov Substitution Principle (LSP), Interface Segregation Principle (ISP), and Dependency Inversion Principle (DIP). By following these principles, developers can write code that is more modular, flexible, and easier to extend or modify without introducing bugs or breaking existing functionality., length: 550
2025-01-22 13:41:32 [main] INFO  c.Orio.wither_project.ai.OllamaTest - CompletableFuture API execution time: 202484 ms
2025-01-22 13:41:57 [main] INFO  c.O.w.p.s.t.PromptModelCombinationTest - Starting PromptModelCombinationTest using Java 17.0.4 with PID 18668 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:41:57 [main] DEBUG c.O.w.p.s.t.PromptModelCombinationTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:41:57 [main] INFO  c.O.w.p.s.t.PromptModelCombinationTest - The following 1 profile is active: "test"
2025-01-22 13:42:04 [main] INFO  c.O.w.p.s.t.PromptModelCombinationTest - Started PromptModelCombinationTest in 7.231 seconds (process running for 8.552)
2025-01-22 13:42:05 [main] INFO  c.O.w.p.s.t.PromptModelCombinationTest - Starting prompt-model combination test for models: [mistral:7b, mistral:instruct, llama3.1:8b, qwen2:latest, qwen2:7b-instruct]
2025-01-22 13:42:05 [main] DEBUG c.O.w.p.s.t.PromptModelCombinationTest - Writing results to: test_results\prompt_model_results_20250122_134205.csv
2025-01-22 13:42:05 [main] INFO  c.O.w.p.s.t.PromptModelCombinationTest - Testing model: mistral:7b
2025-01-22 13:42:05 [main] DEBUG c.O.w.p.s.t.PromptModelCombinationTest - Testing prompt type 'Executive' with model 'mistral:7b'
2025-01-22 13:42:05 [main] DEBUG c.O.w.p.s.t.PromptModelCombinationTest - Generation 1 of 1 for prompt type 'Executive' with model 'mistral:7b'
2025-01-22 13:42:05 [main] INFO  c.O.w.p.s.s.i.OllamaSummaryGenerationService - Starting text summarization with custom instruction
2025-01-22 13:42:05 [main] DEBUG c.O.w.p.s.s.i.OllamaSummaryGenerationService - Text length: 2760 characters
2025-01-22 13:42:05 [main] DEBUG c.O.w.p.s.s.i.OllamaSummaryGenerationService - Instruction:     Act as an executive summary writer. Provide a concise, high-level overview of the given passage, focusing on strategic insights and key points without delving into technical details.

2025-01-22 13:42:05 [main] DEBUG c.O.w.p.s.s.i.OllamaSummaryGenerationService - Sending request to Ollama model
2025-01-22 13:43:46 [restartedMain] INFO  c.Orio.wither_project.WitherProject - Starting WitherProject using Java 17.0.4 with PID 25068 (C:\Users\macie\tools\Wither Project\wither-project-backend\target\classes started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:43:46 [restartedMain] DEBUG c.Orio.wither_project.WitherProject - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:43:46 [restartedMain] INFO  c.Orio.wither_project.WitherProject - The following 1 profile is active: "development"
2025-01-22 13:43:47 [restartedMain] INFO  c.Orio.wither_project.WitherProject - Started WitherProject in 1.751 seconds (process running for 1296.277)
2025-01-22 13:43:51 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Starting OllamaTest using Java 17.0.4 with PID 10264 (started by macie in C:\Users\macie\tools\Wither Project\wither-project-backend)
2025-01-22 13:43:51 [main] DEBUG c.Orio.wither_project.ai.OllamaTest - Running with Spring Boot v3.3.7, Spring v6.1.16
2025-01-22 13:43:51 [main] INFO  c.Orio.wither_project.ai.OllamaTest - The following 1 profile is active: "development"
2025-01-22 13:43:57 [main] INFO  c.Orio.wither_project.ai.OllamaTest - Started OllamaTest in 6.043 seconds (process running for 7.222)
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Java?
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain polymorphism
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain dependency injection
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is REST API?
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Explain Docker containers
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is Spring Boot?
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe SOLID principles
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What are design patterns?
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: What is JPA?
2025-01-22 13:43:58 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Processing message: Answer the following question in 3 sentences: Describe microservices
2025-01-22 13:45:37 [ForkJoinPool.commonPool-worker-8] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Microservices are a design pattern for building and deploying applications as a collection of small, loosely coupled services. Each service is self-contained, with its own database and technology stack, and communicates with other services through APIs or message queues. This approach allows for greater scalability, flexibility, and resilience compared to monolithic architectures, as each service can be developed, deployed, and scaled independently., length: 454
2025-01-22 13:45:38 [ForkJoinPool.commonPool-worker-2] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Polymorphism is a concept in object-oriented programming that allows one interface to be used for multiple data types or classes. This enables objects of different types to be treated as objects of a common superclass, and methods can be called on these objects as if they were instances of the superclass. Polymorphism enhances code flexibility and maintainability by reducing the need for separate conditional statements to handle different types in a single piece of code., length: 476
2025-01-22 13:45:42 [ForkJoinPool.commonPool-worker-10] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Docker containers are lightweight, portable, and self-sufficient units of software that include everything needed to run an application, including the code, a runtime, libraries, environment variables, and config files. Containers are isolated from each other and from the host system using containerization technology, allowing for consistent and reliable deployment across different environments. Docker is the most popular platform for managing containers, providing tools for building, distributing, and running containerized applications., length: 544
2025-01-22 13:45:46 [ForkJoinPool.commonPool-worker-7] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  JPA, or Java Persistence API, is a Java specification for accessing, persisting, and managing data between Java objects and a relational database. It provides an object-relational mapping (ORM) solution for Java developers to interact with databases using an intuitive Java interface instead of writing raw SQL queries. JPA simplifies the development process by abstracting the underlying database details and allowing for platform independence, making it easier to maintain and scale applications over time., length: 509
2025-01-22 13:46:55 [ForkJoinPool.commonPool-worker-3] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Design patterns are reusable solutions to common problems that occur during software development. They provide a proven approach to addressing specific design challenges, improving the quality and maintainability of code. Design patterns can be categorized into various types such as creational, structural, and behavioral, each addressing different aspects of object-oriented design., length: 385
2025-01-22 13:47:09 [ForkJoinPool.commonPool-worker-6] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Dependency injection is a design pattern that allows for the inversion of control during the construction or configuration of an object. Instead of hard-coding dependencies within a class, these dependencies are provided from an external source, such as through constructor injection or setter injection. This approach promotes loosely coupled and modular code, making it easier to test, maintain, and extend the application., length: 426
2025-01-22 13:47:18 [ForkJoinPool.commonPool-worker-5] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Spring Boot is a Java framework that provides a simpler and faster way to create stand-alone, production-grade Spring-based applications. It simplifies the process of setting up a Spring project by embedding Tomcat, Maven or Gradle, and other necessary dependencies. With Spring Boot, developers can quickly get started with pre-configured components and easily build RESTful APIs, web services, and microservices using Spring Data and Spring MVC., length: 448
2025-01-22 13:47:30 [ForkJoinPool.commonPool-worker-9] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  A REST (Representational State Transfer) API is an architectural style for building web services. It connects different components of software systems over the internet, using standard HTTP methods to make requests and transfer data in a lightweight format, such as JSON or XML. REST APIs enable communication between different applications by defining a set of endpoints, each representing a specific resource, and allowing clients to interact with these resources through defined actions like GET, POST, PUT, DELETE, etc., length: 524
2025-01-22 13:47:52 [ForkJoinPool.commonPool-worker-1] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  Java is a high-level, class-based, object-oriented programming language that is designed for building robust and portable applications. It was developed by Sun Microsystems (now owned by Oracle Corporation) and released in 1995. Java is known for its "write once, run anywhere" capability, meaning compiled Java code can run on all platforms that support Java without the need for recompilation., length: 396
2025-01-22 13:47:53 [ForkJoinPool.commonPool-worker-4] INFO  c.Orio.wither_project.ai.OllamaTest - Response received:  SOLID is an acronym for five design principles intended to make software designs more understandable, flexible, and maintainable. These principles are:

1. Single Responsibility Principle (SRP): A class should have only one reason to change, meaning that it should only have one responsibility or job. This makes the code easier to understand and test.
2. Open-Closed Principle (OCP): Software entities (classes, modules, functions) should be open for extension but closed for modification. This means that new functionality should be able to be added without changing existing code.
3. Liskov Substitution Principle (LSP): Subtypes must be substitutable for their base types. In other words, objects of a superclass should be able to be replaced by objects of a subclass without affecting the correctness of the program. This promotes polymorphism and makes code more reusable.

Additionally, SOLID includes the Interface Segregation Principle (ISP), Dependency Inversion Principle (DIP), and the principle of Demeter which are also important design principles that promote loose coupling, separation of concerns, and encapsulation respectively., length: 1147
2025-01-22 13:47:53 [main] INFO  c.Orio.wither_project.ai.OllamaTest - CompletableFuture API execution time: 235580 ms
